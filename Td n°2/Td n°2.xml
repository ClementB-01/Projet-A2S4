<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Td nÂ°2</name>
    </assembly>
    <members>
        <member name="T:ReedSolomon.GenericGF">
            <summary>
              <p>This class contains utility methods for performing mathematical operations over
            the Galois Fields. Operations use a given primitive polynomial in calculations.</p>
              <p>Throughout this package, elements of the GF are represented as an {@code int}
            for convenience and speed (but at the cost of memory).
              </p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ReedSolomon.GenericGF.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a representation of GF(size) using the given primitive polynomial.
            </summary>
            <param name="primitive">irreducible polynomial whose coefficients are represented by
            *  the bits of an int, where the least-significant bit represents the constant
            *  coefficient</param>
            <param name="size">the size of the field</param>
            <param name="genBase">the factor b in the generator polynomial can be 0- or 1-based
            *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).
            *  In most cases it should be 1, but for QR code it is 0.</param>
        </member>
        <member name="M:ReedSolomon.GenericGF.BuildMonomial(System.Int32,System.Int32)">
            <summary>
            Builds the monomial.
            </summary>
            <param name="degree">The degree.</param>
            <param name="coefficient">The coefficient.</param>
            <returns>the monomial representing coefficient * x^degree</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.AddOrSubtract(System.Int32,System.Int32)">
            <summary>
            Implements both addition and subtraction -- they are the same in GF(size).
            </summary>
            <returns>sum/difference of a and b</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.Exp(System.Int32)">
            <summary>
            Exps the specified a.
            </summary>
            <returns>2 to the power of a in GF(size)</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.Log(System.Int32)">
            <summary>
            Logs the specified a.
            </summary>
            <param name="a">A.</param>
            <returns>base 2 log of a in GF(size)</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.Inverse(System.Int32)">
            <summary>
            Inverses the specified a.
            </summary>
            <returns>multiplicative inverse of a</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.Multiply(System.Int32,System.Int32)">
            <summary>
            Multiplies the specified a with b.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>product of a and b in GF(size)</returns>
        </member>
        <member name="P:ReedSolomon.GenericGF.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="P:ReedSolomon.GenericGF.GeneratorBase">
            <summary>
            Gets the generator base.
            </summary>
        </member>
        <member name="M:ReedSolomon.GenericGF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:ReedSolomon.GenericGFPoly">
            <summary>
            <p>Represents a polynomial whose coefficients are elements of a GF.
            Instances of this class are immutable.</p>
            <p>Much credit is due to William Rucklidge since portions of this code are an indirect
            port of his C++ Reed-Solomon implementation.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ReedSolomon.GenericGFPoly.#ctor(ReedSolomon.GenericGF,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:ReedSolomon.GenericGFPoly"/> class.
            </summary>
            <param name="field">the {@link GenericGF} instance representing the field to use
            to perform computations</param>
            <param name="coefficients">coefficients as ints representing elements of GF(size), arranged
            from most significant (highest-power term) coefficient to least significant</param>
            <exception cref="T:System.ArgumentException">if argument is null or empty,
            or if leading coefficient is 0 and this is not a
            constant polynomial (that is, it is not the monomial "0")</exception>
        </member>
        <member name="P:ReedSolomon.GenericGFPoly.Degree">
            <summary>
            degree of this polynomial
            </summary>
        </member>
        <member name="P:ReedSolomon.GenericGFPoly.IsZero">
            <summary>
            Gets a value indicating whether this <see cref="T:ReedSolomon.GenericGFPoly"/> is zero.
            </summary>
            <value>true iff this polynomial is the monomial "0"</value>
        </member>
        <member name="M:ReedSolomon.GenericGFPoly.GetCoefficient(System.Int32)">
            <summary>
            coefficient of x^degree term in this polynomial
            </summary>
            <param name="degree">The degree.</param>
            <returns>coefficient of x^degree term in this polynomial</returns>
        </member>
        <member name="M:ReedSolomon.GenericGFPoly.EvaluateAt(System.Int32)">
            <summary>
            evaluation of this polynomial at a given point
            </summary>
            <param name="a">A.</param>
            <returns>evaluation of this polynomial at a given point</returns>
        </member>
        <member name="M:ReedSolomon.ReedSolomonAlgorithm.Encode(System.Byte[],System.Int32,ReedSolomon.ErrorCorrectionCodeType)">
            <summary>
            Produces error correction codewords for a message using the Reed-Solomon algorithm.
            </summary>
            <param name="message">The message to compute the error correction codewords.</param>
            <param name="eccCount">The number of error correction codewords desired.</param>
            <param name="eccType">The type of Galois field to use to encode error correction codewords.</param>
            <returns>Returns the computed error correction codewords.</returns>
        </member>
        <member name="M:ReedSolomon.ReedSolomonAlgorithm.Encode(System.Byte[],System.Int32)">
            <summary>
            Produces error correction codewords for a message using the Reed-Solomon algorithm.
            </summary>
            <param name="message">The message to compute the error correction codewords.</param>
            <param name="eccCount">The number of error correction codewords desired.</param>
            <returns>Returns the computed error correction codewords.</returns>
        </member>
        <member name="M:ReedSolomon.ReedSolomonAlgorithm.Decode(System.Byte[],System.Byte[],ReedSolomon.ErrorCorrectionCodeType)">
            <summary>
            Repairs a possibly broken message using the Reed-Solomon algorithm.
            </summary>
            <param name="message">The possibly broken message to repair.</param>
            <param name="ecc">The available error correction codewords.</param>
            <param name="eccType">The type of Galois field to use to decode message.</param>
            <returns>Returns the repaired message, or null if it cannot be repaired.</returns>
        </member>
        <member name="M:ReedSolomon.ReedSolomonAlgorithm.Decode(System.Byte[],System.Byte[])">
            <summary>
            Repairs a possibly broken message using the Reed-Solomon algorithm.
            </summary>
            <param name="message">The possibly broken message to repair.</param>
            <param name="ecc">The available error correction codewords.</param>
            <returns>Returns the repaired message, or null if it cannot be repaired.</returns>
        </member>
        <member name="T:ReedSolomon.ReedSolomonDecoder">
            <summary> <p>Implements Reed-Solomon decoding, as the name implies.</p>
            
            <p>The algorithm will not be explained here, but the following references were helpful
            in creating this implementation:</p>
            
            <ul>
            <li>Bruce Maggs.
            <a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/project/pscico-guyb/realworld/www/rs_decode.ps">
            "Decoding Reed-Solomon Codes"</a> (see discussion of Forney's Formula)</li>
            <li>J.I. Hall. <a href="www.mth.msu.edu/~jhall/classes/codenotes/GRS.pdf">
            "Chapter 5. Generalized Reed-Solomon Codes"</a>
            (see discussion of Euclidean algorithm)</li>
            </ul>
            
            <p>Much credit is due to William Rucklidge since portions of this code are an indirect
            port of his C++ Reed-Solomon implementation.</p>
            
            </summary>
            <author>Sean Owen</author>
            <author>William Rucklidge</author>
            <author>sanfordsquires</author>
        </member>
        <member name="M:ReedSolomon.ReedSolomonDecoder.Decode(System.Int32[],System.Int32)">
            <summary>
              <p>Decodes given set of received codewords, which include both data and error-correction
            codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,
            in the input.</p>
            </summary>
            <param name="received">data and error-correction codewords</param>
            <param name="twoS">number of error-correction codewords available</param>
            <returns>false: decoding fails</returns>
        </member>
        <member name="T:ReedSolomon.ReedSolomonEncoder">
            <summary>
            Implements Reed-Solomon encoding, as the name implies.
            </summary>
            <author>Sean Owen</author>
            <author>William Rucklidge</author>
        </member>
        <member name="M:Td_n_2.MyImage.#ctor(System.String)">
            <summary>
            Constructeur de la classe MyImage
            </summary>
            <param name="emplacement"> Emplacement de l'image source </param>
        </member>
        <member name="P:Td_n_2.MyImage.ImageRGB">
            <summary>
            PropriÃ©tÃ© qui permetl'accÃ¨s et l'Ã©criture sur la matrice de pixels
            </summary>
        </member>
        <member name="M:Td_n_2.MyImage.Tostring">
            <summary>
            MÃ©thode retournant les infos de l'entÃªte de l'image traitÃ©e
            </summary>
            <returns> Retourne une chaine de caractÃ¨re comportant les infos </returns>
        </member>
        <member name="M:Td_n_2.MyImage.Convertir_Endian_Int(System.Byte[])">
            <summary>
            MÃ©thode qui convertit en entier un tableau de Little Endian
            </summary>
            <param name="tableau"> Tableau de Little Endian Ã  convertir </param>
            <returns> Retourne l'entier Ã©quivalent </returns>
        </member>
        <member name="M:Td_n_2.MyImage.Convertir_Int_Endian(System.Int32)">
            <summary>
            MÃ©thode convertissant en Little Endian une valeur entiÃ¨re
            </summary>
            <param name="valeur"> Valeur entiÃ¨re Ã  convertir </param>
            <returns> Retourne le tableau de Little Endian Ã©quivalent </returns>
        </member>
        <member name="M:Td_n_2.MyImage.AfficherImage(Td_n_2.Pixel[0:,0:],System.String)">
            <summary>
            MÃ©thode qui permet de crÃ©er une nouvelle image
            </summary>
            <param name="imageAffich"> Matrice de pixel reprÃ©sentant le contenu de l'image </param>
            <param name="fichier"> Emplacement de l'image initale </param>
        </member>
        <member name="M:Td_n_2.MyImage.ByteString(System.Byte[])">
            <summary>
            MÃ©thode qui convertit un tableau de byte en string
            </summary>
            <param name="tab"> Tableau Ã  convertir </param>
            <returns> ChaÃ®ne de caractÃ¨re Ã©quivalente </returns>
        </member>
        <member name="M:Td_n_2.MyImage.AfficherMatriceRGB(Td_n_2.Pixel[0:,0:])">
            <summary>
            MÃ©thode qui affiche dans la console la matrice des pixels
            </summary>
        </member>
        <member name="M:Td_n_2.MyImage.NonNullNonVide(Td_n_2.Pixel[0:,0:])">
            <summary>
            MÃ©thode qui opÃ¨re les vÃ©rifications sur la matrice avant son affichage
            </summary>
            <param name="matrice2D"> Matrice Ã  vÃ©rifier </param>
            <returns> PossibilitÃ© d'afficher ou non et raisons </returns>
        </member>
        <member name="M:Td_n_2.MyImage.NoirBlancGris(System.Int32[],System.Int32)">
            <summary>
            MÃ©thode qui opÃ¨re le traitement en niveau de gris ou noir et blanc de l'image
            </summary>
            <param name="tmode"> Choix de la conversion et des paramÃ¨tres de transformation </param>
            <param name="limite"> Seuil pour le noir et blanc, par dÃ©faut initialiser Ã  la moitiÃ© de la plage (128) </param>
        </member>
        <member name="M:Td_n_2.MyImage.Negatif">
            <summary>
            MÃ©thode qui crÃ©e le nÃ©gatif d'une image donnÃ©e
            </summary>
        </member>
        <member name="M:Td_n_2.MyImage.LuminositÃ©(System.Double)">
            <summary>
            MÃ©thode qui augmente ou diminue la luminositÃ© d'une image en fonction du pourcentage entrÃ©
            </summary>
            <param name="pourcentage"> Pourcentage de changement souhaitÃ© </param>
        </member>
        <member name="M:Td_n_2.MyImage.MaxMin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            MÃ©thode retournant le min ou le max de trois nombres
            </summary>
            <param name="un"> Premier nombre</param>
            <param name="deux"> DeuxiÃ¨me nombre</param>
            <param name="trois"> TroisiÃ¨me nombre</param>
            <param name="sens"> Max (sens = 0) ou min (sens = 1)</param>
            <returns> Retourne l'extremum </returns>
        </member>
        <member name="M:Td_n_2.MyImage.EffetMiroir(System.String)">
            <summary>
            MÃ©thode qui applique un effet miroir selon l'horizontal ou la verticale
            </summary>
            <param name="sens"> Sens de l'effet miroir </param>
        </member>
        <member name="M:Td_n_2.MyImage.Rotation(System.Int32)">
            <summary>
            MÃ©thode qui opÃ¨re la rotation
            </summary>
            <param name="angle"> Choix de l'angle </param>
        </member>
        <member name="M:Td_n_2.MyImage.Dimension(System.Int32)">
            <summary>
            Diminution ou agrandissement de l'image
            </summary>
            <param name="sens"> Sens du changement de dimension </param>
        </member>
        <member name="M:Td_n_2.MyImage.Convolution(System.Int32,System.Int32,System.Int32)">
            <summary>
            MÃ©thode qui permet de calculer le kernel d'une matrice
            </summary>
            <param name="matriceK1"> Matrice principale </param>
            <param name="matriceK2"> Matrice Kernel </param>
        </member>
        <member name="M:Td_n_2.MyImage.ResKern(Td_n_2.Pixel[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            MÃ©thode qui calcule le kernel pour chaque cellule
            </summary>
            <param name="matriceK1Mirroir"> MatriceK1 figÃ©e qui sert de base de calcul </param>
            <param name="matriceK2"> Matrice Kernel </param>
            <param name="posX"> Position suivant X au moment de l'appel </param>
            <param name="posY"> Position suivant Y au moment de l'appel </param>
            <returns></returns>
        </member>
        <member name="M:Td_n_2.MyImage.Histogramme">
            <summary>
            MÃ©thode qui fait l'histogramme des couleurs qui compose l'image
            </summary>
        </member>
        <member name="M:Td_n_2.MyImage.SteganoEncod(Td_n_2.MyImage)">
            <summary>
            MÃ©thode qui cache une image dans une autre
            </summary>
            <param name="dissimulee"> Image Ã  dissimuler </param>
        </member>
        <member name="M:Td_n_2.MyImage.SteganoDecod">
            <summary>
            MÃ©thode qui assure le dÃ©codage de l'image cachÃ©e
            </summary>
        </member>
        <member name="M:Td_n_2.MyImage.FractaleMandelbrot">
            <summary>
            Dessine une fractale de Mandelbrot
            </summary>
        </member>
        <member name="M:Td_n_2.MyImage.Convert_Int_Bit(System.Int32)">
            <summary>
            MÃ©thode qui convertie en un tableau d'int reprÃ©sentatif de sa valeur binaire
            </summary>
            <param name="valeur"> Entier Ã  convertir </param>
            <returns> Tableau d'entier </returns>
        </member>
        <member name="M:Td_n_2.MyImage.Convert_Bit_Int(System.Int32[])">
            <summary>
            MÃ©thode qui convertie un tableau d'entier reprÃ©sentatif de la valeur binaire d'un nombre en un entier
            </summary>
            <param name="valeur"> Tableau d'entier Ã  convertir </param>
            <returns> Entier reprÃ©sentÃ© par le tableau en entrÃ©e </returns>
        </member>
        <member name="M:Td_n_2.MyImage.SteganoDecod2">
            <summary>
            DeuxiÃ¨me mÃ©thode pour dÃ©coder une image cachÃ©e
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Td_n_2.Pixel.#ctor(System.Int32[])" -->
        <member name="P:Td_n_2.Pixel.Rouge">
            <summary>
            PropriÃ©tÃ© permettant l'accÃ¨s et la modification de la composante rouge du pixel
            </summary>
        </member>
        <member name="P:Td_n_2.Pixel.Vert">
            <summary>
            PropriÃ©tÃ© permettant l'accÃ¨s et la modification de la composante verte du pixel
            </summary>
        </member>
        <member name="P:Td_n_2.Pixel.Bleu">
            <summary>
            PropriÃ©tÃ© permettant l'accÃ¨s et la modification de la composante bleue du pixel
            </summary>
        </member>
        <member name="M:Td_n_2.Program.Menu">
            <summary>
            Menu du programme
            </summary>
            <returns> Retourne le mode choisi </returns>
        </member>
        <member name="M:Td_n_2.QrCode.Convertir_Int_to_Binaire(System.Int32,System.Int32)">
            <summary>
            Conversion d'un entier de taille donnÃ©e en un tableau de byte
            </summary>
            <param name="obj"> Entier Ã  convertir </param>
            <param name="taille"> Taille de l'entier considÃ©rÃ© </param>
            <returns> Tableau de byte Ã©quivalent Ã  l'entier </returns>
        </member>
        <member name="M:Td_n_2.QrCode.InfosQRCode2(System.String)">
            <summary>
            Encode les informations qui doivent Ãªtre codÃ©s par les pixels
            </summary>
            <param name="objet"> ChaÃ®ne de caractÃ¨re que le QR code doit signifier </param>
            <returns> Tableau de byte Ã©quivalent Ã  la chaÃ®ne de caractÃ¨re entrÃ©e </returns>
        </member>
        <member name="M:Td_n_2.QrCode.InfosQRCode(System.String)">
            <summary>
            Encode les informations qui doivent Ãªtre codÃ©s par les pixels
            </summary>
            <param name="objet"> ChaÃ®ne de caractÃ¨re que le QR code doit signifier </param>
            <returns> Tableau de byte Ã©quivalent Ã  la chaÃ®ne de caractÃ¨re entrÃ©e </returns>
        </member>
        <member name="M:Td_n_2.QrCode.CrÃ©ationQR">
            <summary>
            MÃ©thode qui crÃ©e la matrice support du QR code qui permettra d'afficher l'image par la suite
            </summary>
            <returns> Matrice de pixels correspondante </returns>
        </member>
        <member name="M:Td_n_2.QrCode.Masque(System.Byte[],Td_n_2.Pixel[0:,0:])">
            <summary>
            MÃ©thode qui permet de prendre en compte l'Ã©tape de masquage du QR code
            </summary>
            <param name="Info"> Tableau de byte comportant l'intÃ©gralitÃ© des donnÃ©es du QR code </param>
            <param name="CrÃ©ationQR"> Matrice support du QR code </param>
            <returns></returns>
        </member>
        <member name="M:Td_n_2.QrCode.AgrandissementCode(Td_n_2.Pixel[0:,0:])">
            <summary>
            MÃ©thode qui agrandi l'image pour la rendre lisible
            </summary>
            <param name="QRCode"> Matrice support Ã  agrandir </param>
        </member>
    </members>
</doc>
